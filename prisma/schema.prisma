generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @db.VarChar(36)
  points             Int             @default(0)
  badges             BadgesOnUsers[]
  currentTask        Task?           @relation(fields: [currentTaskId], references: [id])
  currentTaskId      Int?
  imageURL           String          @default("https://geo-api.frannoflix.xyz/assets/avatars/bird.png")
  treasureHuntStatus Status          @default(NOT_STARTED)
  role               Role            @default(USER)
}

enum Role {
  USER
  ADMIN
}

model Badge {
  id       Int             @id @default(0)
  users    BadgesOnUsers[]
  imageURL String
}

model BadgesOnUsers {
  id        Int     @id @default(autoincrement())
  badge     Badge   @relation(fields: [badgeId], references: [id])
  badgeId   Int
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  completed Boolean

  @@unique(fields: [badgeId, userId], name: "unique_badge_user")
}

model TreasureHunt {
  id   Int    @id @default(autoincrement())
  name String
  Task Task[]
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  FINISHED
}

model Task {
  id             Int          @id @default(autoincrement())
  name           String
  longitude      Float
  latitude       Float
  description    String
  question       String
  treasureHunt   TreasureHunt @relation(fields: [treasureHuntId], references: [id])
  treasureHuntId Int
  answers        Answer[]
  User           User[]
  imageURL       String
  info           String
  iconURL        String
}

model Answer {
  id        Int     @id @default(autoincrement())
  answer    String
  imageURL  String
  isCorrect Boolean
  task      Task    @relation(fields: [taskId], references: [id])
  taskId    Int
}

model Poi {
  id          Int    @id @default(autoincrement())
  name        String
  longitude   Float
  latitude    Float
  description String
  imageURL    String
  iconURL     String
}

model Avatar {
  id       Int    @id @default(autoincrement())
  imageURL String
}
